#!/bin/bash

# Set the log file path
TREESITTER_LOG_FILE="/tmp/nvim_treesitter_update.log"
MASON_LOG_FILE="$XDG_STATE_HOME/nvim/mason.log"

# Remove the old log file if it exists
rm -f "$TREESITTER_LOG_FILE" "$MASON_LOG_FILE"

# Run Neovim with TreeSitter update in the background
nvim --headless -c "lua require('lazy').update(); require('mason-lspconfig.ensure_installed')()" &>"$TREESITTER_LOG_FILE" &
NVIM_PID=$!

start_time=$(date +%s)
timeout=600 # 10 minutes timeout

# Wait for the update to complete
while true; do
  if ! kill -0 $NVIM_PID 2>/dev/null; then
    echo "Neovim process has exited."
    break
  fi

  treesitter_finished=$(rg --pcre2 -o '\[nvim-treesitter] \[([0-9]+)/\1\D' "$TREESITTER_LOG_FILE")
  mason_finished=
  if [ -f "$MASON_LOG_FILE" ]; then
    mason_start_count=$(grep -c 'Executing installer' "$MASON_LOG_FILE")
    mason_installed_count=$(grep -c 'Installation succeeded' "$MASON_LOG_FILE")
    if [ "$mason_start_count" = "$mason_installed_count" ]; then
      mason_finished=true
    fi
  fi

  echo "ts: $treesitter_finished, mson: $mason_finished, mson start: $mason_start_count, mson done: $mason_installed_count"
  if [ -n "${treesitter_finished// }" ] && { [ ! -v $mason_finished ]; }; then
    break
  fi

  # Check for timeout
  current_time=$(date +%s)
  if [ $((current_time - start_time)) -gt $timeout ]; then
    echo "Timeout reached. Forcing exit."
    break
  fi

  sleep 5
done

echo "done updating"
# Kill Neovim if it's still running
kill $NVIM_PID 2>/dev/null
